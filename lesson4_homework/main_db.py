import os
from datetime import datetime

from dotenv import load_dotenv
import telebot
from telebot import types
from db import init_db, add_note, list_notes, update_note, delete_note, find_notes, list_all_notes, \
    get_combined_stats, list_models, get_active_model, set_active_model
from openrouter import chat_once, OpenRouterError

load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–í .env —Ñ–∞–π–ª–µ –Ω–µ—Ç TOKEN")

bot = telebot.TeleBot(TOKEN)

init_db()
def create_main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("/start", "/help", "/note_add", "/note_list", "/note_find", "/note_edit", "/note_del", "/note_export", "/stats")
    return kb

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['help'])
def help_cmd(message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/note_add <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/note_find <–∑–∞–ø—Ä–æ—Å> - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É
/note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_del <id> - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_export - –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
/stats - C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/models - –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
/model <id> - –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å/–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é
/ask <—Ç–µ–∫—Å—Ç> - –°–ø—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å
"""
    bot.reply_to(message, help_text)



@bot.message_handler(commands=['note_list'])
def note_list(message):
    user_id = message.from_user.id
    user_notes = list_notes(user_id)

    if not user_notes:
        bot.reply_to(message, "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + "\n".join([f"{note['id']}: {note['text']}" for note in user_notes])
    bot.reply_to(message, response)






@bot.message_handler(commands=['note_add'])
def note_add_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏:")
    bot.register_next_step_handler(message, on_note_add_text)

def on_note_add_text(message):
    text = message.text.strip()
    if not text:
        bot.reply_to(message, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_add")
        return

    user_id = message.from_user.id
    note_id = add_note(user_id, text)

    if note_id > 0:
        bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        bot.reply_to(message, f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫ ({50} —à—Ç.). –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")

@bot.message_handler(commands=['note_find'])
def note_find_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(message, on_note_find_query)

def on_note_find_query(message):
    query_text = message.text.strip()
    if not query_text:
        bot.reply_to(message, "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_find")
        return

    user_id = message.from_user.id
    found_notes = find_notes(user_id, query_text)

    if not found_notes:
        bot.reply_to(message, f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query_text}¬ª.")
        return

    response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + "\n".join([f"{note['id']}: {note['text']}" for note in found_notes])
    bot.reply_to(message, response)

@bot.message_handler(commands=['note_del'])
def note_del_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, on_note_del_id)

def on_note_del_id(message):
    try:
        note_id = int(message.text.strip())
    except ValueError:
        bot.reply_to(message, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_del")
        return

    user_id = message.from_user.id
    success = delete_note(user_id, note_id)

    if success:
        bot.reply_to(message, f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['note_edit'])
def note_edit_start(message):
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, on_note_edit_id)

def on_note_edit_id(message):
    try:
        note_id = int(message.text.strip())
    except ValueError:
        bot.reply_to(message, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_edit")
        return

    user_notes = list_all_notes(message.from_user.id)
    if not any(note['id'] == note_id for note in user_notes):
        bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_edit")
        return

    bot.reply_to(message, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ #{note_id}:")
    bot.register_next_step_handler(message, on_note_edit_text, note_id=note_id)

def on_note_edit_text(message, note_id: int):
    new_text = message.text.strip()
    if not new_text:
        bot.reply_to(message, "–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /note_edit")
        return

    user_id = message.from_user.id
    success = update_note(user_id, note_id, new_text)

    if success:
        bot.reply_to(message, f"‚úçÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.")
    else:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ #{note_id}.")


@bot.message_handler(commands=['note_export'])
def note_export_detailed(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"

    stats = get_combined_stats(user_id)
    all_notes = list_all_notes(user_id)

    if not all_notes:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    today_str = datetime.now().strftime('%Y-%m-%d %H:%M')
    content = f"# –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n"
    content += f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {today_str}\n\n"

    content += "## üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    content += f"* **–ó–∞–Ω—è—Ç–æ —Å–ª–æ—Ç–æ–≤:** {stats['total_notes']} / {50}\n"
    content += f"* **–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º:** {stats['total_chars']:,} —Å–∏–º–≤–æ–ª–æ–≤\n\n"

    content += "### –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è)\n"
    content += f"* ‚úÖ –°–æ–∑–¥–∞–Ω–æ: **{stats['total_created']}**\n"
    content += f"* ‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: **{stats['total_edited']}**\n"
    content += f"* ‚ùå –£–¥–∞–ª–µ–Ω–æ: **{stats['total_deleted']}**\n\n"

    content += "### –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é\n"
    content += f"* ‚úÖ –°–æ–∑–¥–∞–Ω–æ: **{stats['weekly_created']}**\n"
    content += f"* ‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: **{stats['weekly_edited']}**\n"
    content += f"* ‚ùå –£–¥–∞–ª–µ–Ω–æ: **{stats['weekly_deleted']}**\n\n"

    content += "---\n\n"
    content += f"## üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(all_notes)} —à—Ç.)\n\n"

    for note in all_notes:
        content += f"### –ó–∞–º–µ—Ç–∫–∞ #{note['id']}\n"
        content += f"* **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {note['created_at']}\n\n"
        note_text_quoted = "> " + note['text'].replace('\n', '\n> ')
        content += f"{note_text_quoted}\n\n"
        content += "---\n\n"

    file_path = f"export_{username}_{datetime.now().strftime('%Y%m%d')}.md"

    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

        with open(file_path, 'rb') as f:
            bot.send_document(
                message.chat.id,
                f,
                caption=f"–í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤.\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(all_notes)} –∑–∞–º–µ—Ç–æ–∫ –∏ –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è user_id {user_id}: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

@bot.message_handler(commands=['stats'])
def note_stats(message):
    user_id = message.from_user.id
    stats = get_combined_stats(user_id)

    total_notes = stats['total_notes']

    BAR_CHAR_FILLED = '‚ñà'
    BAR_CHAR_EMPTY = '‚ñë'
    BAR_LENGTH = 20

    filled_count = int((total_notes / 50) * BAR_LENGTH)
    empty_count = BAR_LENGTH - filled_count

    histogram = f"{BAR_CHAR_FILLED * filled_count}{BAR_CHAR_EMPTY * empty_count}"

    response_text = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        f"**–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫:**\n"
        f"`{histogram}`\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ **{total_notes}** –∏–∑ **{50}** —Å–ª–æ—Ç–æ–≤.\n"
        f"üìù **–°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º:** `{stats['total_chars']:,}` —Å–∏–º–≤–æ–ª–æ–≤\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π (–≤—Å–µ–≥–æ):**\n"
        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: **{stats['total_created']}**\n"
        f"‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: **{stats['total_edited']}**\n"
        f"‚ùå –£–¥–∞–ª–µ–Ω–æ: **{stats['total_deleted']}**\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:**\n"
        f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: **{stats['weekly_created']}**\n"
        f"‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: **{stats['weekly_edited']}**\n"
        f"‚ùå –£–¥–∞–ª–µ–Ω–æ: **{stats['weekly_deleted']}**"
    )

    bot.reply_to(message, response_text, parse_mode='Markdown')



@bot.message_handler(commands=["models"])
def cmd_models(message: types.Message) -> None:
    items = list_models()
    if not items:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    lines = ["–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"]
    for m in items:
        star = "‚òÖ" if m["active"] else " "
        lines.append(f"{star} {m['id']}. {m['label']}  [{m['key']}]")
    lines.append("\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: /model <ID>")
    bot.reply_to(message, "\n".join(lines))

@bot.message_handler(commands=["model"])
def cmd_model(message: types.Message) -> None:
    arg = message.text.replace("/model", "", 1).strip()

    if not arg:
        active = get_active_model()
        bot.reply_to(message, text=f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active['label']} [{active['key']}]\n(—Å–º–µ–Ω–∏—Ç—å: /model <ID> –∏–ª–∏ /models)")
        return

    if not arg.isdigit():
        bot.reply_to(message, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <ID –∏–∑ /models>")
        return

    try:
        active = set_active_model(int(arg))
        bot.reply_to(message, text=f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {active['label']} [{active['key']}]")
    except ValueError:
        bot.reply_to(message, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ /models.")


@bot.message_handler(commands=["ask"])
def cmd_ask(message: types.Message) -> None:
    q = message.text.replace("/ask", "", 1).strip()
    if not q:
        bot.reply_to(message, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask <–≤–æ–ø—Ä–æ—Å>")
        return

    msgs = _build_messages(message.from_user.id, q[:600])
    model_key = get_active_model()["key"]

    try:
        text, ms = chat_once(msgs, model=model_key, temperature=0.2, max_tokens=400)
        out = (text or "").strip()[:4000]  # –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        bot.reply_to(message, text=f"{out}\n\n({ms} –º—Å; –º–æ–¥–µ–ª—å: {model_key})")
    except OpenRouterError as e:
        bot.reply_to(message, text=f"–û—à–∏–±–∫–∞: {e}")
    except Exception:
        bot.reply_to(message, text="–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


def _build_messages(user_id: int, user_text: str) -> list[dict]:
    system = (
        f"–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Å—É—â–µ—Å—Ç–≤—É.\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "1) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º.\n"
    )
    return [
        {"role": "system", "content": system},
        {"role": "user", "content": user_text},
    ]

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling(skip_pending=True)